/******/ (() => { // webpackBootstrap
/*!****************************!*\
  !*** ./static/js/login.js ***!
  \****************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
/*
    Process login form: call login API, and in case of success redirect to main page
*/
var ApiToken = "";

function successFunction(xhttp) {
  //
  var jsonString = xhttp.responseText;
  var message = "You have logged in, API token=";
  var json_data = JSON.parse(jsonString);
  ApiToken = json_data.token;
  sessionStorage.setItem("apiToken", ApiToken);
  document.getElementById("login-result").innerHTML = message + ApiToken;
  document.getElementById("login-result").className = "alert alert-success";
  window.location.href = "../../templates/js/calendar.html";
}

function failFunction(xhttp) {
  document.getElementById("login-result").innerHTML = "Pair login/password is invalid!";
  document.getElementById("login-result").className = "alert alert-danger";
}

function sendAuthPostRequest(url, jsonString) {
  var xhttp = new XMLHttpRequest();

  xhttp.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      successFunction(this);
    }

    if (this.readyState == 4 && this.status != 200) {
      failFunction(this);
    }
  };

  xhttp.open("POST", url, true);
  xhttp.setRequestHeader("Content-type", "application/json");
  xhttp.send(jsonString);
}

$("#loginForm").on("submit", function (event) {
  event.preventDefault();
  var values = {};
  $.each($("#loginForm").serializeArray(), function (i, field) {
    values[field.name] = field.value;
  });
  var jsonString = JSON.stringify(values); // sendAuthPostRequest(
  // 	" http://127.0.0.1:8000/api/v1/get_auth_token",
  // 	jsonString
  // )

  sendAuthPostRequest("/api/v1/get_auth_token", jsonString);
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maW5hbC8uL3N0YXRpYy9qcy9sb2dpbi5qcyJdLCJuYW1lcyI6WyJBcGlUb2tlbiIsInN1Y2Nlc3NGdW5jdGlvbiIsInhodHRwIiwianNvblN0cmluZyIsInJlc3BvbnNlVGV4dCIsIm1lc3NhZ2UiLCJqc29uX2RhdGEiLCJKU09OIiwicGFyc2UiLCJ0b2tlbiIsInNlc3Npb25TdG9yYWdlIiwic2V0SXRlbSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJjbGFzc05hbWUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJmYWlsRnVuY3Rpb24iLCJzZW5kQXV0aFBvc3RSZXF1ZXN0IiwidXJsIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwiJCIsIm9uIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInZhbHVlcyIsImVhY2giLCJzZXJpYWxpemVBcnJheSIsImkiLCJmaWVsZCIsIm5hbWUiLCJ2YWx1ZSIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBRUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7O0FBRUEsU0FBU0MsZUFBVCxDQUF5QkMsS0FBekIsRUFBZ0M7QUFDL0I7QUFDQSxNQUFJQyxVQUFVLEdBQUdELEtBQUssQ0FBQ0UsWUFBdkI7QUFDQSxNQUFJQyxPQUFPLEdBQUcsZ0NBQWQ7QUFDQSxNQUFJQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXTCxVQUFYLENBQWhCO0FBQ0FILFVBQVEsR0FBR00sU0FBUyxDQUFDRyxLQUFyQjtBQUVBQyxnQkFBYyxDQUFDQyxPQUFmLENBQXVCLFVBQXZCLEVBQW1DWCxRQUFuQztBQUVBWSxVQUFRLENBQUNDLGNBQVQsQ0FBd0IsY0FBeEIsRUFBd0NDLFNBQXhDLEdBQW9EVCxPQUFPLEdBQUdMLFFBQTlEO0FBQ0FZLFVBQVEsQ0FBQ0MsY0FBVCxDQUF3QixjQUF4QixFQUF3Q0UsU0FBeEMsR0FBb0QscUJBQXBEO0FBQ0FDLFFBQU0sQ0FBQ0MsUUFBUCxDQUFnQkMsSUFBaEIsR0FBdUIsa0NBQXZCO0FBQ0E7O0FBRUQsU0FBU0MsWUFBVCxDQUFzQmpCLEtBQXRCLEVBQTZCO0FBQzVCVSxVQUFRLENBQUNDLGNBQVQsQ0FBd0IsY0FBeEIsRUFBd0NDLFNBQXhDLEdBQ0MsaUNBREQ7QUFFQUYsVUFBUSxDQUFDQyxjQUFULENBQXdCLGNBQXhCLEVBQXdDRSxTQUF4QyxHQUFvRCxvQkFBcEQ7QUFDQTs7QUFFRCxTQUFTSyxtQkFBVCxDQUE2QkMsR0FBN0IsRUFBa0NsQixVQUFsQyxFQUE4QztBQUM3QyxNQUFJRCxLQUFLLEdBQUcsSUFBSW9CLGNBQUosRUFBWjs7QUFFQXBCLE9BQUssQ0FBQ3FCLGtCQUFOLEdBQTJCLFlBQVk7QUFDdEMsUUFBSSxLQUFLQyxVQUFMLElBQW1CLENBQW5CLElBQXdCLEtBQUtDLE1BQUwsSUFBZSxHQUEzQyxFQUFnRDtBQUMvQ3hCLHFCQUFlLENBQUMsSUFBRCxDQUFmO0FBQ0E7O0FBQ0QsUUFBSSxLQUFLdUIsVUFBTCxJQUFtQixDQUFuQixJQUF3QixLQUFLQyxNQUFMLElBQWUsR0FBM0MsRUFBZ0Q7QUFDL0NOLGtCQUFZLENBQUMsSUFBRCxDQUFaO0FBQ0E7QUFDRCxHQVBEOztBQVNBakIsT0FBSyxDQUFDd0IsSUFBTixDQUFXLE1BQVgsRUFBbUJMLEdBQW5CLEVBQXdCLElBQXhCO0FBQ0FuQixPQUFLLENBQUN5QixnQkFBTixDQUF1QixjQUF2QixFQUF1QyxrQkFBdkM7QUFDQXpCLE9BQUssQ0FBQzBCLElBQU4sQ0FBV3pCLFVBQVg7QUFDQTs7QUFFRDBCLENBQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0JDLEVBQWhCLENBQW1CLFFBQW5CLEVBQTZCLFVBQVVDLEtBQVYsRUFBaUI7QUFDN0NBLE9BQUssQ0FBQ0MsY0FBTjtBQUNBLE1BQUlDLE1BQU0sR0FBRyxFQUFiO0FBQ0FKLEdBQUMsQ0FBQ0ssSUFBRixDQUFPTCxDQUFDLENBQUMsWUFBRCxDQUFELENBQWdCTSxjQUFoQixFQUFQLEVBQXlDLFVBQVVDLENBQVYsRUFBYUMsS0FBYixFQUFvQjtBQUM1REosVUFBTSxDQUFDSSxLQUFLLENBQUNDLElBQVAsQ0FBTixHQUFxQkQsS0FBSyxDQUFDRSxLQUEzQjtBQUNBLEdBRkQ7QUFHQSxNQUFJcEMsVUFBVSxHQUFHSSxJQUFJLENBQUNpQyxTQUFMLENBQWVQLE1BQWYsQ0FBakIsQ0FONkMsQ0FRN0M7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FiLHFCQUFtQixDQUNsQix3QkFEa0IsRUFFbEJqQixVQUZrQixDQUFuQjtBQUlBLENBaEJELEUiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICAgIFByb2Nlc3MgbG9naW4gZm9ybTogY2FsbCBsb2dpbiBBUEksIGFuZCBpbiBjYXNlIG9mIHN1Y2Nlc3MgcmVkaXJlY3QgdG8gbWFpbiBwYWdlXHJcbiovXHJcblxyXG52YXIgQXBpVG9rZW4gPSBcIlwiXHJcblxyXG5mdW5jdGlvbiBzdWNjZXNzRnVuY3Rpb24oeGh0dHApIHtcclxuXHQvL1xyXG5cdGxldCBqc29uU3RyaW5nID0geGh0dHAucmVzcG9uc2VUZXh0XHJcblx0bGV0IG1lc3NhZ2UgPSBcIllvdSBoYXZlIGxvZ2dlZCBpbiwgQVBJIHRva2VuPVwiXHJcblx0bGV0IGpzb25fZGF0YSA9IEpTT04ucGFyc2UoanNvblN0cmluZylcclxuXHRBcGlUb2tlbiA9IGpzb25fZGF0YS50b2tlblxyXG5cclxuXHRzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiYXBpVG9rZW5cIiwgQXBpVG9rZW4pXHJcblx0XHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2dpbi1yZXN1bHRcIikuaW5uZXJIVE1MID0gbWVzc2FnZSArIEFwaVRva2VuXHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2dpbi1yZXN1bHRcIikuY2xhc3NOYW1lID0gXCJhbGVydCBhbGVydC1zdWNjZXNzXCJcclxuXHR3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiLi4vLi4vdGVtcGxhdGVzL2pzL2NhbGVuZGFyLmh0bWxcIlxyXG59XHJcblxyXG5mdW5jdGlvbiBmYWlsRnVuY3Rpb24oeGh0dHApIHtcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvZ2luLXJlc3VsdFwiKS5pbm5lckhUTUwgPVxyXG5cdFx0XCJQYWlyIGxvZ2luL3Bhc3N3b3JkIGlzIGludmFsaWQhXCJcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvZ2luLXJlc3VsdFwiKS5jbGFzc05hbWUgPSBcImFsZXJ0IGFsZXJ0LWRhbmdlclwiXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlbmRBdXRoUG9zdFJlcXVlc3QodXJsLCBqc29uU3RyaW5nKSB7XHJcblx0bGV0IHhodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcclxuXHJcblx0eGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0aWYgKHRoaXMucmVhZHlTdGF0ZSA9PSA0ICYmIHRoaXMuc3RhdHVzID09IDIwMCkge1xyXG5cdFx0XHRzdWNjZXNzRnVuY3Rpb24odGhpcylcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gNCAmJiB0aGlzLnN0YXR1cyAhPSAyMDApIHtcclxuXHRcdFx0ZmFpbEZ1bmN0aW9uKHRoaXMpXHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHR4aHR0cC5vcGVuKFwiUE9TVFwiLCB1cmwsIHRydWUpXHJcblx0eGh0dHAuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcclxuXHR4aHR0cC5zZW5kKGpzb25TdHJpbmcpXHJcbn1cclxuXHJcbiQoXCIjbG9naW5Gb3JtXCIpLm9uKFwic3VibWl0XCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHRsZXQgdmFsdWVzID0ge31cclxuXHQkLmVhY2goJChcIiNsb2dpbkZvcm1cIikuc2VyaWFsaXplQXJyYXkoKSwgZnVuY3Rpb24gKGksIGZpZWxkKSB7XHJcblx0XHR2YWx1ZXNbZmllbGQubmFtZV0gPSBmaWVsZC52YWx1ZVxyXG5cdH0pXHJcblx0bGV0IGpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZXMpXHJcblxyXG5cdC8vIHNlbmRBdXRoUG9zdFJlcXVlc3QoXHJcblx0Ly8gXHRcIiBodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL3YxL2dldF9hdXRoX3Rva2VuXCIsXHJcblx0Ly8gXHRqc29uU3RyaW5nXHJcblx0Ly8gKVxyXG5cdHNlbmRBdXRoUG9zdFJlcXVlc3QoXHJcblx0XHRcIi9hcGkvdjEvZ2V0X2F1dGhfdG9rZW5cIixcclxuXHRcdGpzb25TdHJpbmdcclxuXHQpXHJcbn0pXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=